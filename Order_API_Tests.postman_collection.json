{
  "info": {
    "name": "Vina Shoes - Order API Tests",
    "description": "Collection ƒë·ªÉ test t·∫•t c·∫£ c√°c API li√™n quan ƒë·∫øn Order",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "adminToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "orderId",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üîê Auth Setup",
      "item": [
        {
          "name": "Customer Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', response.access_token);",
                  "    pm.collectionVariables.set('userId', response.user.id);",
                  "    pm.test('Login successful', function () {",
                  "        pm.expect(response.access_token).to.exist;",
                  "    });",
                  "} else {",
                  "    pm.test('Login failed', function () {",
                  "        pm.response.to.have.status(401);",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"customer@test.com\",\n  \"password\": \"password123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "Admin Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('adminToken', response.access_token);",
                  "    pm.test('Admin login successful', function () {",
                  "        pm.expect(response.access_token).to.exist;",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@test.com\",\n  \"password\": \"admin123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          }
        }
      ]
    },
    {
      "name": "üì¶ Order Management",
      "item": [
        {
          "name": "Create Order",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('orderId', response.order.id);",
                  "    pm.test('Order created successfully', function () {",
                  "        pm.expect(response.order).to.exist;",
                  "        pm.expect(response.order.orderNumber).to.exist;",
                  "        pm.expect(response.order.status).to.equal('pending');",
                  "    });",
                  "} else {",
                  "    pm.test('Order creation failed', function () {",
                  "        pm.response.to.have.status(400);",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"items\": [\n    {\n      \"productId\": \"60d5ecb74b24a1234567890a\",\n      \"name\": \"Nike Air Force 1\",\n      \"image\": \"https://example.com/nike-af1.jpg\",\n      \"size\": 42,\n      \"price\": 2500000,\n      \"quantity\": 1\n    },\n    {\n      \"productId\": \"60d5ecb74b24a1234567890b\",\n      \"name\": \"Adidas Ultraboost\",\n      \"image\": \"https://example.com/adidas-ub.jpg\",\n      \"size\": 41,\n      \"price\": 3200000,\n      \"quantity\": 2\n    }\n  ],\n  \"shippingAddress\": {\n    \"fullName\": \"Nguy·ªÖn VƒÉn A\",\n    \"phone\": \"0987654321\",\n    \"addressLine\": \"123 ƒê∆∞·ªùng ABC\",\n    \"ward\": \"Ph∆∞·ªùng 1\",\n    \"district\": \"Qu·∫≠n 1\",\n    \"city\": \"H·ªì Ch√≠ Minh\"\n  },\n  \"paymentMethod\": \"credit_card\",\n  \"notes\": \"Giao h√†ng trong gi·ªù h√†nh ch√≠nh\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/orders",
              "host": ["{{baseUrl}}"],
              "path": ["orders"]
            }
          }
        },
        {
          "name": "Get My Orders",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get my orders successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.orders).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/orders/my-orders",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "my-orders"]
            }
          }
        },
        {
          "name": "Get Order by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get order by ID successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.orderNumber).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/orders/{{orderId}}",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "{{orderId}}"]
            }
          }
        },
        {
          "name": "Update Order",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Update order successful', function () {",
                  "    if (pm.response.code === 200) {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response.order).to.exist;",
                  "    } else {",
                  "        pm.expect(pm.response.code).to.be.oneOf([400, 403]);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"shippingAddress\": {\n    \"fullName\": \"Nguy·ªÖn VƒÉn B\",\n    \"phone\": \"0987654322\",\n    \"addressLine\": \"456 ƒê∆∞·ªùng DEF\",\n    \"ward\": \"Ph∆∞·ªùng 2\",\n    \"district\": \"Qu·∫≠n 2\",\n    \"city\": \"H·ªì Ch√≠ Minh\"\n  },\n  \"notes\": \"C·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ giao h√†ng\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/orders/{{orderId}}",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "{{orderId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "üí≥ Payment Flow",
      "item": [
        {
          "name": "Create Payment Intent",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Payment intent created', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.clientSecret).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/orders/{{orderId}}/payment-intent",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "{{orderId}}", "payment-intent"]
            }
          }
        },
        {
          "name": "Confirm Payment (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Payment confirmed by admin', function () {",
                  "    if (pm.response.code === 200) {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response.order.paymentStatus).to.equal('paid');",
                  "    } else {",
                  "        pm.expect(pm.response.code).to.be.oneOf([400, 403]);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"paymentTransactionId\": \"txn_test_123456\",\n  \"paymentMethod\": \"credit_card\",\n  \"notes\": \"Payment confirmed by admin\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/orders/{{orderId}}/confirm-payment",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "{{orderId}}", "confirm-payment"]
            }
          }
        }
      ]
    },
    {
      "name": "üìã Order Status Management",
      "item": [
        {
          "name": "Update Order Status (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Order status updated', function () {",
                  "    if (pm.response.code === 200) {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response.order.status).to.equal('processing');",
                  "    } else {",
                  "        pm.expect(pm.response.code).to.be.oneOf([400, 403]);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"processing\",\n  \"note\": \"ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/orders/{{orderId}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "{{orderId}}", "status"]
            }
          }
        },
        {
          "name": "Update Tracking Info (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Tracking info updated', function () {",
                  "    if (pm.response.code === 200) {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response.trackingNumber).to.exist;",
                  "    } else {",
                  "        pm.expect(pm.response.code).to.be.oneOf([400, 403]);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"trackingNumber\": \"VN123456789\",\n  \"carrier\": \"Giao H√†ng Nhanh\",\n  \"estimatedDelivery\": \"2024-12-30T10:00:00.000Z\",\n  \"deliveryNotes\": \"Giao trong gi·ªù h√†nh ch√≠nh\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/orders/{{orderId}}/tracking",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "{{orderId}}", "tracking"]
            }
          }
        },
        {
          "name": "Get Tracking Info",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get tracking info successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.orderNumber).to.exist;",
                  "    pm.expect(response.status).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/orders/{{orderId}}/tracking",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "{{orderId}}", "tracking"]
            }
          }
        },
        {
          "name": "Confirm Delivery (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Delivery confirmed', function () {",
                  "    if (pm.response.code === 200) {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response.actualDelivery).to.exist;",
                  "    } else {",
                  "        pm.expect(pm.response.code).to.be.oneOf([400, 403]);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"actualDelivery\": \"2024-12-25T14:30:00.000Z\",\n  \"deliveryNotes\": \"ƒê√£ giao th√†nh c√¥ng\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/orders/{{orderId}}/confirm-delivery",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "{{orderId}}", "confirm-delivery"]
            }
          }
        }
      ]
    },
    {
      "name": "üîÑ Order Actions",
      "item": [
        {
          "name": "Cancel Order",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Order cancelled', function () {",
                  "    if (pm.response.code === 200) {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response.order.status).to.equal('cancelled');",
                  "    } else {",
                  "        pm.expect(pm.response.code).to.be.oneOf([400, 403]);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"Kh√¥ng c·∫ßn n·ªØa\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/orders/{{orderId}}/cancel",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "{{orderId}}", "cancel"]
            }
          }
        },
        {
          "name": "Reorder",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Reorder successful', function () {",
                  "    if (pm.response.code === 201) {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response.newOrder).to.exist;",
                  "        pm.expect(response.newOrder.orderNumber).to.exist;",
                  "    } else {",
                  "        pm.expect(pm.response.code).to.be.oneOf([400, 403, 404]);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"shippingAddress\": {\n    \"fullName\": \"Nguy·ªÖn VƒÉn A\",\n    \"phone\": \"0987654321\",\n    \"addressLine\": \"123 ƒê∆∞·ªùng ABC\",\n    \"ward\": \"Ph∆∞·ªùng 1\",\n    \"district\": \"Qu·∫≠n 1\",\n    \"city\": \"H·ªì Ch√≠ Minh\"\n  },\n  \"paymentMethod\": \"credit_card\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/orders/{{orderId}}/reorder",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "{{orderId}}", "reorder"]
            }
          }
        },
        {
          "name": "Create Return Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Return request created', function () {",
                  "    if (pm.response.code === 200) {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response.order.returnInfo.status).to.equal('requested');",
                  "    } else {",
                  "        pm.expect(pm.response.code).to.be.oneOf([400, 403]);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"S·∫£n ph·∫©m b·ªã l·ªói\",\n  \"notes\": \"Gi√†y b·ªã r√°ch sau 1 ng√†y s·ª≠ d·ª•ng\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/orders/{{orderId}}/return-request",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "{{orderId}}", "return-request"]
            }
          }
        },
        {
          "name": "Process Return Request (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Return request processed', function () {",
                  "    if (pm.response.code === 200) {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response.order.returnInfo.status).to.be.oneOf(['approved', 'rejected']);",
                  "    } else {",
                  "        pm.expect(pm.response.code).to.be.oneOf([400, 403]);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"approved\",\n  \"refundAmount\": 2500000,\n  \"returnTrackingNumber\": \"RT123456789\",\n  \"notes\": \"ƒê√£ ph√™ duy·ªát y√™u c·∫ßu tr·∫£ h√†ng\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/orders/{{orderId}}/return-request",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "{{orderId}}", "return-request"]
            }
          }
        },
        {
          "name": "Add Review",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Review added', function () {",
                  "    if (pm.response.code === 200) {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response.order.rating).to.exist;",
                  "        pm.expect(response.order.review).to.exist;",
                  "    } else {",
                  "        pm.expect(pm.response.code).to.be.oneOf([400, 403]);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"rating\": 5,\n  \"review\": \"S·∫£n ph·∫©m r·∫•t t·ªët, giao h√†ng nhanh!\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/orders/{{orderId}}/review",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "{{orderId}}", "review"]
            }
          }
        }
      ]
    },
    {
      "name": "üìä Admin Features",
      "item": [
        {
          "name": "Get All Orders (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get all orders successful', function () {",
                  "    if (pm.response.code === 200) {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response.orders).to.be.an('array');",
                  "    } else {",
                  "        pm.expect(pm.response.code).to.equal(403);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/orders?status=pending&paymentStatus=pending",
              "host": ["{{baseUrl}}"],
              "path": ["orders"],
              "query": [
                {
                  "key": "status",
                  "value": "pending"
                },
                {
                  "key": "paymentStatus",
                  "value": "pending"
                }
              ]
            }
          }
        },
        {
          "name": "Get Orders by User ID (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get user orders successful', function () {",
                  "    if (pm.response.code === 200) {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response.orders).to.be.an('array');",
                  "    } else {",
                  "        pm.expect(pm.response.code).to.equal(403);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/orders/user/{{userId}}?status=pending",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "user", "{{userId}}"],
              "query": [
                {
                  "key": "status",
                  "value": "pending"
                }
              ]
            }
          }
        },
        {
          "name": "Get Order Statistics (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get stats successful', function () {",
                  "    if (pm.response.code === 200) {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response.totalOrders).to.exist;",
                  "        pm.expect(response.totalRevenue).to.exist;",
                  "        pm.expect(response.ordersByStatus).to.exist;",
                  "    } else {",
                  "        pm.expect(pm.response.code).to.equal(403);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/orders/stats/overview",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "stats", "overview"]
            }
          }
        },
        {
          "name": "Delete Order (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Order deleted', function () {",
                  "    if (pm.response.code === 200) {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response.message).to.contain('deleted');",
                  "    } else {",
                  "        pm.expect(pm.response.code).to.be.oneOf([403, 404]);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/orders/{{orderId}}",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "{{orderId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "üß™ Error Scenarios",
      "item": [
        {
          "name": "Create Order - Unauthorized",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Unauthorized access blocked', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"items\": [],\n  \"shippingAddress\": {},\n  \"paymentMethod\": \"credit_card\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/orders",
              "host": ["{{baseUrl}}"],
              "path": ["orders"]
            }
          }
        },
        {
          "name": "Get Order - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Order not found', function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/orders/invalid-order-id",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "invalid-order-id"]
            }
          }
        },
        {
          "name": "Admin Action with Customer Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Access forbidden for customer', function () {",
                  "    pm.response.to.have.status(403);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/orders/stats/overview",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "stats", "overview"]
            }
          }
        }
      ]
    }
  ]
} 